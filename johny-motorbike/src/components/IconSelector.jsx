import { GiMountains } from "react-icons/gi";
import { GiLighthouse } from "react-icons/gi";
import { GiCircleForest } from "react-icons/gi";
import { GiDesertSkull } from "react-icons/gi";
import { GiField } from "react-icons/gi";
import { GiModernCity } from "react-icons/gi";
import { GiRoad } from "react-icons/gi";
import { FaHillRockslide } from "react-icons/fa6";




/**
 * Componente para selección mediante iconos
 * @param {Object} props
 * @param {string} props.title - Título del selector
 * @param {Array} props.items - Array de objetos con los items disponibles 
 * @param {Array} props.selectedItems - Array con los IDs de los items seleccionados
 * @param {Function} props.onItemToggle - Función para manejar la selección/deselección
 */
const IconSelector = ({ title, items, selectedItems, onItemToggle }) => {
  // Mapeo de tipos de paisaje a iconos
  const landscapeIcons = {
    'Montaña': (
      <GiMountains />
    ),
    'Bosque': (
      <GiCircleForest />

    ),
    'Costa': (
      <GiLighthouse />

    ),
    'Desierto': (
      <GiDesertSkull />
    ),
    'Ciudad': (
      <GiModernCity />

    ),
    'Campo': (
      <GiField />
    ),
  };
  
  // Mapeo de tipos de terreno a iconos (SVG)
  const terrainIcons = {
    'Asfalto': (
      <GiRoad />

    ),
    'Tierra': (
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="20" fill="none" viewBox="0 0 48 48" id="unpaved-road">
  <path fill="#333" fillRule="evenodd" d="M21.8008 12.4012C22.1316 12.8435 22.0412 13.4701 21.5989 13.8009 20.2892 14.7803 19.0491 15.856 17.8892 17.0209 14.7542 20.1695 12.2672 23.9077 10.5703 28.0221 8.87343 32.1365 8 36.5464 8 41.0001 8 41.5523 7.55228 42.0001 7 42.0001 6.44772 42.0001 6 41.5523 6 41.0001 6 36.285 6.92469 31.6159 8.72138 27.2595 10.5181 22.9031 13.1517 18.9445 16.4719 15.6098 17.7004 14.376 19.0139 13.2366 20.4011 12.1992 20.8434 11.8685 21.4701 11.9589 21.8008 12.4012zM25.0958 22.7402L24.3725 23.4307C23.8313 23.9474 23.3107 24.4883 22.8119 25.0515L22.1489 25.8002 20.6517 24.4742 21.3146 23.7256C21.85 23.1211 22.4093 22.5399 22.9915 21.9841L23.7148 21.2935 25.0958 22.7402zM20.6433 27.8088L20.1084 28.6537C19.3093 29.9156 18.6019 31.2489 17.9939 32.6399L17.5934 33.5561 15.7608 32.7551 16.1614 31.8388C16.8095 30.3561 17.5644 28.9327 18.4186 27.5837L18.9536 26.7389 20.6433 27.8088zM16.7568 35.9368L16.4948 36.9019C16.2982 37.6264 16.1268 38.3613 15.9816 39.1047L15.79 40.0862 13.8271 39.7029 14.0187 38.7215C14.1731 37.9307 14.3554 37.149 14.5647 36.3779L14.8267 35.4129 16.7568 35.9368zM31.8488 26.4714C32.1408 26.9401 31.9975 27.5569 31.5288 27.8489 30.5929 28.4319 29.72 29.1019 28.9238 29.8497 27.3584 31.3199 26.1201 33.062 25.2766 34.9746 24.4332 36.887 24 38.9343 24 41.0001 24 41.5524 23.5523 42.0001 23 42.0001 22.4477 42.0001 22 41.5524 22 41.0001 22 38.6536 22.4922 36.3317 23.4467 34.1675 24.4011 32.0036 25.7981 30.0416 27.5547 28.3918 28.448 27.5528 29.4255 26.8028 30.4712 26.1514 30.94 25.8593 31.5567 26.0026 31.8488 26.4714z" clipRule="evenodd"></path>
  <path fill="#333" d="M42 7.5C42 8.32843 41.3284 9 40.5 9 39.6716 9 39 8.32843 39 7.5 39 6.67157 39.6716 6 40.5 6 41.3284 6 42 6.67157 42 7.5zM42 12.5C42 13.3284 41.3284 14 40.5 14 39.6716 14 39 13.3284 39 12.5 39 11.6716 39.6716 11 40.5 11 41.3284 11 42 11.6716 42 12.5zM42 17.5C42 18.3284 41.3284 19 40.5 19 39.6716 19 39 18.3284 39 17.5 39 16.6716 39.6716 16 40.5 16 41.3284 16 42 16.6716 42 17.5zM41.5 21.3496C41.5 21.9019 41.0523 22.3496 40.5 22.3496 39.9477 22.3496 39.5 21.9019 39.5 21.3496 39.5 20.7973 39.9477 20.3496 40.5 20.3496 41.0523 20.3496 41.5 20.7973 41.5 21.3496zM36.6868 7.92226C36.8029 8.74251 36.2321 9.5016 35.4119 9.61774 34.5916 9.73389 33.8325 9.1631 33.7164 8.34285 33.6003 7.52261 34.171 6.76351 34.9913 6.64737 35.8115 6.53123 36.5706 7.10202 36.6868 7.92226zM37.3879 12.8727C37.5041 13.6929 36.9333 14.452 36.113 14.5682 35.2928 14.6843 34.5337 14.1135 34.4176 13.2933 34.3014 12.473 34.8722 11.714 35.6925 11.5978 36.5127 11.4817 37.2718 12.0525 37.3879 12.8727zM38.0889 17.8234C38.205 18.6436 37.6342 19.4027 36.814 19.5189 35.9937 19.635 35.2346 19.0642 35.1185 18.244 35.0024 17.4237 35.5731 16.6646 36.3934 16.5485 37.2136 16.4324 37.9727 17.0031 38.0889 17.8234zM38.79 22.7741C38.9062 23.5943 38.3354 24.3534 37.5151 24.4695 36.6949 24.5857 35.9358 24.0149 35.8197 23.1947 35.7035 22.3744 36.2743 21.6153 37.0946 21.4992 37.9148 21.383 38.6739 21.9538 38.79 22.7741zM30.0448 9.63063C30.3844 10.3863 30.0472 11.2741 29.2915 11.6137 28.5359 11.9533 27.6481 11.616 27.3085 10.8604 26.9689 10.1047 27.3062 9.2169 28.0618 8.87731 28.8174 8.53773 29.7053 8.875 30.0448 9.63063zM32.0947 14.1912C32.4342 14.9468 32.097 15.8346 31.3413 16.1742 30.5857 16.5138 29.6979 16.1765 29.3583 15.4209 29.0187 14.6653 29.356 13.7774 30.1116 13.4379 30.8672 13.0983 31.7551 13.4355 32.0947 14.1912zM34.1442 18.7517C34.4838 19.5073 34.1465 20.3952 33.3909 20.7348 32.6353 21.0744 31.7474 20.7371 31.4078 19.9815 31.0683 19.2258 31.4055 18.338 32.1612 17.9984 32.9168 17.6588 33.8046 17.9961 34.1442 18.7517zM35.0767 22.2661C35.3031 22.7699 35.0782 23.3618 34.5745 23.5882 34.0707 23.8146 33.4788 23.5897 33.2524 23.086 33.0261 22.5822 33.2509 21.9903 33.7547 21.7639 34.2584 21.5375 34.8503 21.7624 35.0767 22.2661zM23.0252 11.9107C23.5636 12.5404 23.4896 13.4872 22.8599 14.0256 22.2303 14.564 21.2834 14.4899 20.7451 13.8603 20.2067 13.2306 20.2807 12.2838 20.9103 11.7454 21.54 11.2071 22.4869 11.2811 23.0252 11.9107zM26.6485 16.6817C27.1869 17.3114 27.1129 18.2582 26.4832 18.7966 25.8536 19.335 24.9067 19.2609 24.3683 18.6313 23.83 18.0016 23.904 17.0548 24.5336 16.5164 25.1633 15.9781 26.1101 16.0521 26.6485 16.6817zM29.8978 20.482C30.4361 21.1117 30.3621 22.0585 29.7325 22.5969 29.1028 23.1352 28.156 23.0612 27.6176 22.4316 27.0792 21.8019 27.1533 20.8551 27.7829 20.3167 28.4126 19.7784 29.3594 19.8524 29.8978 20.482zM33.147 25.2823C33.6854 25.912 33.6114 26.8588 32.9817 27.3972 32.3521 27.9355 31.4052 27.8615 30.8669 27.2319 30.3285 26.6022 30.4025 25.6554 31.0322 25.117 31.6618 24.5786 32.6087 24.6527 33.147 25.2823zM27.5616 13.6911C27.5616 14.1705 27.1729 14.5591 26.6935 14.5591 26.2141 14.5591 25.8254 14.1705 25.8254 13.6911 25.8254 13.2116 26.2141 12.823 26.6935 12.823 27.1729 12.823 27.5616 13.2116 27.5616 13.6911zM30.1546 18.0338C30.1546 18.5133 29.766 18.9019 29.2865 18.9019 28.8071 18.9019 28.4185 18.5133 28.4185 18.0338 28.4185 17.5544 28.8071 17.1658 29.2865 17.1658 29.766 17.1658 30.1546 17.5544 30.1546 18.0338zM34.5787 15.9211C34.5787 16.4005 34.19 16.7891 33.7106 16.7891 33.2312 16.7891 32.8425 16.4005 32.8425 15.9211 32.8425 15.4416 33.2312 15.053 33.7106 15.053 34.19 15.053 34.5787 15.4416 34.5787 15.9211zM39.3343 15.1322C39.3343 15.6117 38.9456 16.0003 38.4662 16.0003 37.9868 16.0003 37.5981 15.6117 37.5981 15.1322 37.5981 14.6528 37.9868 14.2642 38.4662 14.2642 38.9456 14.2642 39.3343 14.6528 39.3343 15.1322zM33.5777 11.3605C33.5777 11.8399 33.189 12.2286 32.7096 12.2286 32.2302 12.2286 31.8416 11.8399 31.8416 11.3605 31.8416 10.8811 32.2302 10.4924 32.7096 10.4924 33.189 10.4924 33.5777 10.8811 33.5777 11.3605zM39.0001 10.1317C39.0001 10.6112 38.6114 10.9998 38.132 10.9998 37.6526 10.9998 37.2639 10.6112 37.2639 10.1317 37.2639 9.65232 37.6526 9.26367 38.132 9.26367 38.6114 9.26367 39.0001 9.65232 39.0001 10.1317z"></path>
</svg>
    ),
    'Gravilla': (
      <FaHillRockslide />

    )
  };
  
  // Determinar qué conjunto de iconos usar basado en el título
  const icons = title === 'Paisaje' ? landscapeIcons : terrainIcons;
  
  return (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700 mb-2">{title}</label>
      <div className="flex flex-wrap gap-2">
        {items && items.map((item) => {
          const Icon = icons[item.name] || (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z" />
            </svg>
          ); // Icono por defecto si no hay mapeo
          
          return (
            <button
              key={item.id}
              onClick={() => onItemToggle(item.id)}
              className={`p-2 rounded-md flex flex-col items-center justify-center transition-all ${
                selectedItems.includes(item.id)
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
              }`}
              title={item.name}
            >
              <span className="mb-1">{Icon}</span>
              <span className="text-xs">{item.name}</span>
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default IconSelector;